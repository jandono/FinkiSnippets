@model Entity.EventSnippets

@{
    ViewBag.Title = "Game";

}

@*<div class="countdown small span4" data-role="countdown" data-stoptimer="@Model.Event.End"></div>*@


<div class="grid">
    <div class="row">
        <div class="span9">
            <ul style="list-style-type:none;margin:0 0 30px 0;padding:0;">
                @for (int i = 1; i <= (int)ViewBag.lastOrderNumber; i++)
                {
                    if (i == Model.OrderNumber)
                    {
                        <li style="display:inline;"><button class="danger mini">@i</button></li>
                    }
                    else
                    {
                        <li style="display:inline;"><button class="mini">@i</button></li>
                    }
                }
            </ul>
        </div>
        <div id="CDT" class="small span3"></div>
    </div>
</div>
<h2 style="margin-bottom:25px;">@Model.Snippet.Question</h2>

<div id="editor">@HttpUtility.UrlDecode(Model.Snippet.Code)</div>


@using(Html.BeginForm("NextSnippet", "Code"))
{
    <br>
    <label>Внесете го одговорот овде:</label>
    <br>
    <input id="output" name="answer" type="text">    
    <input type="text" name="SnippetID" value="@Model.SnippetID" hidden />
    <input type="text" name="EventID" value="@Model.EventID" hidden />

    <div style="padding-top:10px;">
        <button class="button" id="btnClear">Clear</button>
        <input type="submit" value="Next" class="button" />
    </div>
}

@section Scripts{
    <script src="~/Scripts/src-noconflict/ace.js"></script>
    <script src="~/Scripts/metro-times.js"></script>
    <script src="~/Scripts/metro-countdown.js"></script>
    <script>
        $(document).ready(function () {

            $("#btnClear").click(function (event) {
                event.preventDefault();
                $("#output").val("");
            });

            
            var editor = ace.edit("editor");
            editor.setTheme("ace/theme/eclipse");
            editor.getSession().setMode("ace/mode/java");
            editor.setOptions({
                readOnly: true,
                highlightActiveLine: false,
                highlightGutterLine: false
            });
            editor.renderer.$cursorLayer.element.style.opacity = 0;
            var heightUpdateFunction = function () {

                // http://stackoverflow.com/questions/11584061/
                var newHeight =
                          editor.getSession().getScreenLength()
                          * editor.renderer.lineHeight
                          + editor.renderer.scrollBar.getWidth();

                if (newHeight < 100)
                    newHeight = 100;

                $('#editor').height(newHeight.toString() + "px");
                $('#editor-section').height(newHeight.toString() + "px");

                // This call is required for the editor to fix all of
                // its inner structure for adapting to a change in size
                editor.resize();
            };

            
            // Set initial size to match initial content
            heightUpdateFunction();

            // Whenever a change happens inside the ACE editor, update
            // the size again
            editor.getSession().on('change', heightUpdateFunction);                        
        });
    </script>
    <script language="JavaScript" type="text/javascript">
        function CountdownTimer(elm, tl, mes) {
            this.initialize.apply(this, arguments);
        }
        CountdownTimer.prototype = {
            initialize: function (elm, tl, mes) {
                this.elem = document.getElementById(elm);
                this.tl = tl;
                this.mes = mes;
            }, countDown: function () {
                var timer = '';
                var today = new Date();
                var day = Math.floor((this.tl - today) / (24 * 60 * 60 * 1000));
                var hour = Math.floor(((this.tl - today) % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000));
                var min = Math.floor(((this.tl - today) % (24 * 60 * 60 * 1000)) / (60 * 1000)) % 60;
                var sec = Math.floor(((this.tl - today) % (24 * 60 * 60 * 1000)) / 1000) % 60 % 60;
                var milli = Math.floor(((this.tl - today) % (24 * 60 * 60 * 1000)) / 10) % 100;
                var me = this;

                if ((this.tl - today) > 0) {
                    if (day) timer += '<span class="day">' + day + ' : </span>';
                    if (hour) timer += '<span class="hour">' + hour + ' : </span>';
                    timer += '<span class="min">' + this.addZero(min) + ' : </span><span class="sec">' + this.addZero(sec) + '</span>';//<span class="milli">' + this.addZero(milli) + '</span>';
                    this.elem.innerHTML = timer;
                    tid = setTimeout(function () { me.countDown(); }, 10);
                } else {
                    this.elem.innerHTML = this.mes;
                    return;
                }
            }, addZero: function (num) { return ('0' + num).slice(-2); }
        }
        function CDT() {
            var tl = new Date('@Model.Event.End');
            var timer = new CountdownTimer('CDT', tl, 'Времето истече, тестирањето заврши!');
            timer.countDown();
        }
        window.onload = function () {
            CDT();
        }
    </script>
}